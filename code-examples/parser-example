class Functor f {
  func fmap(a -> b, f<a>) -> f<b>
}

class Applicative f extends Functor {
  func pure(x) -> f<x>
  func <*>(f<a -> b>, f<a>) -> f<b>
}

class Alternative f extends Applicative {
  func empty() -> f<a>
  func <|>(f<a>, f<a>) -> f<a>
}

type Parser = Parser({ parse: String -> Maybe<(T, String)> })

member Parser of Functor {
  func fmap(f, Parser p) = Parser(input => match p(input) {
    case Just(x, xs) -> Just(f(x), xs),
    case Nothing     -> Nothing
  })
}

member Parser of Applicative {
  func pure(x) = Parser(input => Just(x, input)),

  func <*>(Parser p1, Parser p2) = Parser(input => match p1(input) {
    case Nothing         -> Nothing,
    case Just(f, input') -> match p2(input') {
      case Nothing          -> Nothing,
      case Just(x, input'') -> Just(f(x), input'')
    }
  })
}

member Parser of Alternative {
  func empty() = Parser(_ => Nothing),

  func <|>(Parser p1, Parser p2) = Parser(input => match p1(input) {
    case Just res -> Just res,
    Nothing       -> p2(input)
  })
}

func charP(c: char) -> Parser<Char> = Parser(input => {
  let h = head(input)
  return Just(h, tail(input)) if h == c else Nothing
})

func symbolP(s: String) -> Parser<String> = (sequenceA . map(charP))(s)

func charInP(s: String) -> Parser<Char> = Parser(input => {
  let h = head(input)
  return Just(h, tail(input)) if includes(s, h) else Nothing
})

func sc() -> Parser<()> = (void . many . charInP)(" \t\n")

func sc'() -> Parser<()> = (void . many . charInP)(" \t")
